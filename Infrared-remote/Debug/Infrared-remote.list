
Infrared-remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f00  08002f00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002f14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002f14  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a15  00000000  00000000  000297fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002401a  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac65  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd2f  00000000  00000000  0005adf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa0  00000000  00000000  00138b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ed0 	.word	0x08002ed0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002ed0 	.word	0x08002ed0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <DWT_Delay_Init+0x58>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <DWT_Delay_Init+0x58>)
 8000516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800051a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <DWT_Delay_Init+0x58>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <DWT_Delay_Init+0x58>)
 8000522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000526:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <DWT_Delay_Init+0x5c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <DWT_Delay_Init+0x5c>)
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <DWT_Delay_Init+0x5c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <DWT_Delay_Init+0x5c>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <DWT_Delay_Init+0x5c>)
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000546:	bf00      	nop
     __ASM volatile ("NOP");
 8000548:	bf00      	nop
  __ASM volatile ("NOP");
 800054a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <DWT_Delay_Init+0x5c>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000554:	2300      	movs	r3, #0
 8000556:	e000      	b.n	800055a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000558:	2301      	movs	r3, #1
  }
}
 800055a:	4618      	mov	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000edf0 	.word	0xe000edf0
 8000568:	e0001000 	.word	0xe0001000

0800056c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f043 030c 	orr.w	r3, r3, #12
 800058a:	b2db      	uxtb	r3, r3
 800058c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	f043 0308 	orr.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005ac:	f107 0208 	add.w	r2, r7, #8
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2304      	movs	r3, #4
 80005b6:	214e      	movs	r1, #78	; 0x4e
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <lcd_send_cmd+0x5c>)
 80005ba:	f001 f831 	bl	8001620 <HAL_I2C_Master_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f023 030f 	bic.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030d 	orr.w	r3, r3, #13
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0309 	orr.w	r3, r3, #9
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800060c:	f107 0208 	add.w	r2, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2304      	movs	r3, #4
 8000616:	214e      	movs	r1, #78	; 0x4e
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <lcd_send_data+0x5c>)
 800061a:	f001 f801 	bl	8001620 <HAL_I2C_Master_Transmit>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028

0800062c <lcd_clear>:

void lcd_clear (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000632:	2080      	movs	r0, #128	; 0x80
 8000634:	f7ff ff9a 	bl	800056c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e005      	b.n	800064a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800063e:	2020      	movs	r0, #32
 8000640:	f7ff ffc4 	bl	80005cc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b45      	cmp	r3, #69	; 0x45
 800064e:	ddf6      	ble.n	800063e <lcd_clear+0x12>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <lcd_init>:

void lcd_init (void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800065e:	2002      	movs	r0, #2
 8000660:	f7ff ff84 	bl	800056c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	f7ff ff81 	bl	800056c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800066a:	200c      	movs	r0, #12
 800066c:	f7ff ff7e 	bl	800056c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000670:	2080      	movs	r0, #128	; 0x80
 8000672:	f7ff ff7b 	bl	800056c <lcd_send_cmd>
	lcd_clear ();
 8000676:	f7ff ffd9 	bl	800062c <lcd_clear>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <DWT_Delay_us+0x40>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800068e:	f001 fff7 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <DWT_Delay_us+0x44>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	0c9b      	lsrs	r3, r3, #18
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80006a4:	bf00      	nop
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <DWT_Delay_us+0x40>)
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f8      	bcc.n	80006a6 <DWT_Delay_us+0x26>
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	e0001000 	.word	0xe0001000
 80006c4:	431bde83 	.word	0x431bde83

080006c8 <receive_data.0>:
  /* USER CODE BEGIN 1 */
	uint32_t data;
	uint8_t count;

	uint32_t receive_data (void)
	{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4664      	mov	r4, ip
 80006d0:	f8c7 c004 	str.w	ip, [r7, #4]
		uint32_t code=0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]

			  /* The START Sequence begin here
		   * there will be a pulse of 9ms LOW and
		   * than 4.5 ms space (HIGH)
		   */
		  while (!(HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7)));  // wait for the pin to go high.. 9ms LOW
 80006d8:	bf00      	nop
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4824      	ldr	r0, [pc, #144]	; (8000770 <receive_data.0+0xa8>)
 80006de:	f000 fedd 	bl	800149c <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f8      	beq.n	80006da <receive_data.0+0x12>

		  while ((HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7)));  // wait for the pin to go low.. 4.5ms HIGH
 80006e8:	bf00      	nop
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	4820      	ldr	r0, [pc, #128]	; (8000770 <receive_data.0+0xa8>)
 80006ee:	f000 fed5 	bl	800149c <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f8      	bne.n	80006ea <receive_data.0+0x22>
		   * We are only going to check the SPACE after 562.5us pulse
		   * if the space is 562.5us, the bit indicates '0'
		   * if the space is around 1.6ms, the bit is '1'
		   */

		  for (int i=0; i<32; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	e030      	b.n	8000760 <receive_data.0+0x98>
		  {
			  count=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	7023      	strb	r3, [r4, #0]

			  while (!(HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7))); // wait for pin to go high.. this is 562.5us LOW
 8000702:	bf00      	nop
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	481a      	ldr	r0, [pc, #104]	; (8000770 <receive_data.0+0xa8>)
 8000708:	f000 fec8 	bl	800149c <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f8      	beq.n	8000704 <receive_data.0+0x3c>

			  while ((HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7)))  // count the space length while the pin is high
 8000712:	e006      	b.n	8000722 <receive_data.0+0x5a>
			  {
				  count++;
 8000714:	7823      	ldrb	r3, [r4, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	7023      	strb	r3, [r4, #0]
				  DWT_Delay_us(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f7ff ffaf 	bl	8000680 <DWT_Delay_us>
			  while ((HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7)))  // count the space length while the pin is high
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	4812      	ldr	r0, [pc, #72]	; (8000770 <receive_data.0+0xa8>)
 8000726:	f000 feb9 	bl	800149c <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1f1      	bne.n	8000714 <receive_data.0+0x4c>
			  }

			  if (count > 12) // if the space is more than 1.2 ms
 8000730:	7823      	ldrb	r3, [r4, #0]
 8000732:	2b0c      	cmp	r3, #12
 8000734:	d908      	bls.n	8000748 <receive_data.0+0x80>
			  {
				  code |= (1UL << (31-i));   // write 1
 8000736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	fa22 f303 	lsr.w	r3, r2, r3
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	4313      	orrs	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e008      	b.n	800075a <receive_data.0+0x92>
			  }

			  else code &= ~(1UL << (31-i));  // write 0
 8000748:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	fa22 f303 	lsr.w	r3, r2, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
		  for (int i=0; i<32; i++)
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3301      	adds	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b1f      	cmp	r3, #31
 8000764:	ddcb      	ble.n	80006fe <receive_data.0+0x36>
		  }

			return code;
 8000766:	68fb      	ldr	r3, [r7, #12]
	}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	40021800 	.word	0x40021800

08000774 <main>:
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
int main(void)
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fb79 	bl	8000e76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f95e 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 fa08 	bl	8000b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800078c:	f000 f9c6 	bl	8000b1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init ();
 8000790:	f7ff febc 	bl	800050c <DWT_Delay_Init>
  	lcd_init ();
 8000794:	f7ff ff61 	bl	800065a <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7));   // wait for the pin to go low
 8000798:	bf00      	nop
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <main+0x50>)
 800079e:	f000 fe7d 	bl	800149c <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f8      	bne.n	800079a <main+0x26>

	 		data = receive_data ();
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	469c      	mov	ip, r3
 80007ac:	f7ff ff8c 	bl	80006c8 <receive_data.0>
 80007b0:	60f8      	str	r0, [r7, #12]

	 		convert_code (data);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	469c      	mov	ip, r3
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f000 f806 	bl	80007c8 <convert_code.1>

	 		HAL_Delay (200);
 80007bc:	20c8      	movs	r0, #200	; 0xc8
 80007be:	f000 fbb7 	bl	8000f30 <HAL_Delay>
	  while (HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_7));   // wait for the pin to go low
 80007c2:	e7e9      	b.n	8000798 <main+0x24>
 80007c4:	40021800 	.word	0x40021800

080007c8 <convert_code.1>:
	{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	f8c7 c000 	str.w	ip, [r7]
			switch (code)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a8a      	ldr	r2, [pc, #552]	; (8000a00 <convert_code.1+0x238>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	f000 80a2 	beq.w	8000922 <convert_code.1+0x15a>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a87      	ldr	r2, [pc, #540]	; (8000a00 <convert_code.1+0x238>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	f200 8106 	bhi.w	80009f4 <convert_code.1+0x22c>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a86      	ldr	r2, [pc, #536]	; (8000a04 <convert_code.1+0x23c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	f000 80b4 	beq.w	800095a <convert_code.1+0x192>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a83      	ldr	r2, [pc, #524]	; (8000a04 <convert_code.1+0x23c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	f200 80fc 	bhi.w	80009f4 <convert_code.1+0x22c>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a82      	ldr	r2, [pc, #520]	; (8000a08 <convert_code.1+0x240>)
 8000800:	4293      	cmp	r3, r2
 8000802:	f000 80a3 	beq.w	800094c <convert_code.1+0x184>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a7f      	ldr	r2, [pc, #508]	; (8000a08 <convert_code.1+0x240>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f200 80f2 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a7e      	ldr	r2, [pc, #504]	; (8000a0c <convert_code.1+0x244>)
 8000814:	4293      	cmp	r3, r2
 8000816:	f000 80b5 	beq.w	8000984 <convert_code.1+0x1bc>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a7b      	ldr	r2, [pc, #492]	; (8000a0c <convert_code.1+0x244>)
 800081e:	4293      	cmp	r3, r2
 8000820:	f200 80e8 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a7a      	ldr	r2, [pc, #488]	; (8000a10 <convert_code.1+0x248>)
 8000828:	4293      	cmp	r3, r2
 800082a:	f000 809d 	beq.w	8000968 <convert_code.1+0x1a0>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a77      	ldr	r2, [pc, #476]	; (8000a10 <convert_code.1+0x248>)
 8000832:	4293      	cmp	r3, r2
 8000834:	f200 80de 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a76      	ldr	r2, [pc, #472]	; (8000a14 <convert_code.1+0x24c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d062      	beq.n	8000906 <convert_code.1+0x13e>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a74      	ldr	r2, [pc, #464]	; (8000a14 <convert_code.1+0x24c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	f200 80d5 	bhi.w	80009f4 <convert_code.1+0x22c>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a72      	ldr	r2, [pc, #456]	; (8000a18 <convert_code.1+0x250>)
 800084e:	4293      	cmp	r3, r2
 8000850:	f000 80a6 	beq.w	80009a0 <convert_code.1+0x1d8>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a70      	ldr	r2, [pc, #448]	; (8000a18 <convert_code.1+0x250>)
 8000858:	4293      	cmp	r3, r2
 800085a:	f200 80cb 	bhi.w	80009f4 <convert_code.1+0x22c>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a6e      	ldr	r2, [pc, #440]	; (8000a1c <convert_code.1+0x254>)
 8000862:	4293      	cmp	r3, r2
 8000864:	f000 8087 	beq.w	8000976 <convert_code.1+0x1ae>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a6c      	ldr	r2, [pc, #432]	; (8000a1c <convert_code.1+0x254>)
 800086c:	4293      	cmp	r3, r2
 800086e:	f200 80c1 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a6a      	ldr	r2, [pc, #424]	; (8000a20 <convert_code.1+0x258>)
 8000876:	4293      	cmp	r3, r2
 8000878:	f000 808b 	beq.w	8000992 <convert_code.1+0x1ca>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <convert_code.1+0x258>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f200 80b7 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a66      	ldr	r2, [pc, #408]	; (8000a24 <convert_code.1+0x25c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d042      	beq.n	8000914 <convert_code.1+0x14c>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a64      	ldr	r2, [pc, #400]	; (8000a24 <convert_code.1+0x25c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f200 80ae 	bhi.w	80009f4 <convert_code.1+0x22c>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a63      	ldr	r2, [pc, #396]	; (8000a28 <convert_code.1+0x260>)
 800089c:	4293      	cmp	r3, r2
 800089e:	f000 809b 	beq.w	80009d8 <convert_code.1+0x210>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a60      	ldr	r2, [pc, #384]	; (8000a28 <convert_code.1+0x260>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	f200 80a4 	bhi.w	80009f4 <convert_code.1+0x22c>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a5f      	ldr	r2, [pc, #380]	; (8000a2c <convert_code.1+0x264>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	f000 8098 	beq.w	80009e6 <convert_code.1+0x21e>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a5c      	ldr	r2, [pc, #368]	; (8000a2c <convert_code.1+0x264>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	f200 809a 	bhi.w	80009f4 <convert_code.1+0x22c>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a5b      	ldr	r2, [pc, #364]	; (8000a30 <convert_code.1+0x268>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d072      	beq.n	80009ae <convert_code.1+0x1e6>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a59      	ldr	r2, [pc, #356]	; (8000a30 <convert_code.1+0x268>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	f200 8091 	bhi.w	80009f4 <convert_code.1+0x22c>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a57      	ldr	r2, [pc, #348]	; (8000a34 <convert_code.1+0x26c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d02a      	beq.n	8000930 <convert_code.1+0x168>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a55      	ldr	r2, [pc, #340]	; (8000a34 <convert_code.1+0x26c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	f200 8088 	bhi.w	80009f4 <convert_code.1+0x22c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a54      	ldr	r2, [pc, #336]	; (8000a38 <convert_code.1+0x270>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d067      	beq.n	80009bc <convert_code.1+0x1f4>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <convert_code.1+0x270>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d87f      	bhi.n	80009f4 <convert_code.1+0x22c>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <convert_code.1+0x274>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d020      	beq.n	800093e <convert_code.1+0x176>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a50      	ldr	r2, [pc, #320]	; (8000a40 <convert_code.1+0x278>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d062      	beq.n	80009ca <convert_code.1+0x202>
					break;
 8000904:	e076      	b.n	80009f4 <convert_code.1+0x22c>
					lcd_send_cmd (0x86);
 8000906:	2086      	movs	r0, #134	; 0x86
 8000908:	f7ff fe30 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('1');
 800090c:	2031      	movs	r0, #49	; 0x31
 800090e:	f7ff fe5d 	bl	80005cc <lcd_send_data>
					break;
 8000912:	e070      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000914:	2086      	movs	r0, #134	; 0x86
 8000916:	f7ff fe29 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('2');
 800091a:	2032      	movs	r0, #50	; 0x32
 800091c:	f7ff fe56 	bl	80005cc <lcd_send_data>
					break;
 8000920:	e069      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000922:	2086      	movs	r0, #134	; 0x86
 8000924:	f7ff fe22 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('3');
 8000928:	2033      	movs	r0, #51	; 0x33
 800092a:	f7ff fe4f 	bl	80005cc <lcd_send_data>
					break;
 800092e:	e062      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000930:	2086      	movs	r0, #134	; 0x86
 8000932:	f7ff fe1b 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('4');
 8000936:	2034      	movs	r0, #52	; 0x34
 8000938:	f7ff fe48 	bl	80005cc <lcd_send_data>
					break;
 800093c:	e05b      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 800093e:	2086      	movs	r0, #134	; 0x86
 8000940:	f7ff fe14 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('5');
 8000944:	2035      	movs	r0, #53	; 0x35
 8000946:	f7ff fe41 	bl	80005cc <lcd_send_data>
					break;
 800094a:	e054      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 800094c:	2086      	movs	r0, #134	; 0x86
 800094e:	f7ff fe0d 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('6');
 8000952:	2036      	movs	r0, #54	; 0x36
 8000954:	f7ff fe3a 	bl	80005cc <lcd_send_data>
					break;
 8000958:	e04d      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 800095a:	2086      	movs	r0, #134	; 0x86
 800095c:	f7ff fe06 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('7');
 8000960:	2037      	movs	r0, #55	; 0x37
 8000962:	f7ff fe33 	bl	80005cc <lcd_send_data>
					break;
 8000966:	e046      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000968:	2086      	movs	r0, #134	; 0x86
 800096a:	f7ff fdff 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('8');
 800096e:	2038      	movs	r0, #56	; 0x38
 8000970:	f7ff fe2c 	bl	80005cc <lcd_send_data>
					break;
 8000974:	e03f      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000976:	2086      	movs	r0, #134	; 0x86
 8000978:	f7ff fdf8 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('9');
 800097c:	2039      	movs	r0, #57	; 0x39
 800097e:	f7ff fe25 	bl	80005cc <lcd_send_data>
					break;
 8000982:	e038      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000984:	2086      	movs	r0, #134	; 0x86
 8000986:	f7ff fdf1 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('#');
 800098a:	2023      	movs	r0, #35	; 0x23
 800098c:	f7ff fe1e 	bl	80005cc <lcd_send_data>
					break;
 8000990:	e031      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 8000992:	2086      	movs	r0, #134	; 0x86
 8000994:	f7ff fdea 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('*');
 8000998:	202a      	movs	r0, #42	; 0x2a
 800099a:	f7ff fe17 	bl	80005cc <lcd_send_data>
					break;
 800099e:	e02a      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009a0:	2086      	movs	r0, #134	; 0x86
 80009a2:	f7ff fde3 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('0');
 80009a6:	2030      	movs	r0, #48	; 0x30
 80009a8:	f7ff fe10 	bl	80005cc <lcd_send_data>
					break;
 80009ac:	e023      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009ae:	2086      	movs	r0, #134	; 0x86
 80009b0:	f7ff fddc 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('K');
 80009b4:	204b      	movs	r0, #75	; 0x4b
 80009b6:	f7ff fe09 	bl	80005cc <lcd_send_data>
					break;
 80009ba:	e01c      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009bc:	2086      	movs	r0, #134	; 0x86
 80009be:	f7ff fdd5 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('^');
 80009c2:	205e      	movs	r0, #94	; 0x5e
 80009c4:	f7ff fe02 	bl	80005cc <lcd_send_data>
					break;
 80009c8:	e015      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009ca:	2086      	movs	r0, #134	; 0x86
 80009cc:	f7ff fdce 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('<');
 80009d0:	203c      	movs	r0, #60	; 0x3c
 80009d2:	f7ff fdfb 	bl	80005cc <lcd_send_data>
					break;
 80009d6:	e00e      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009d8:	2086      	movs	r0, #134	; 0x86
 80009da:	f7ff fdc7 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('>');
 80009de:	203e      	movs	r0, #62	; 0x3e
 80009e0:	f7ff fdf4 	bl	80005cc <lcd_send_data>
					break;
 80009e4:	e007      	b.n	80009f6 <convert_code.1+0x22e>
					lcd_send_cmd (0x86);
 80009e6:	2086      	movs	r0, #134	; 0x86
 80009e8:	f7ff fdc0 	bl	800056c <lcd_send_cmd>
					lcd_send_data ('u');
 80009ec:	2075      	movs	r0, #117	; 0x75
 80009ee:	f7ff fded 	bl	80005cc <lcd_send_data>
					break;
 80009f2:	e000      	b.n	80009f6 <convert_code.1+0x22e>
					break;
 80009f4:	bf00      	nop
	}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	00ffe21d 	.word	0x00ffe21d
 8000a04:	00ffe01f 	.word	0x00ffe01f
 8000a08:	00ffc23d 	.word	0x00ffc23d
 8000a0c:	00ffb04f 	.word	0x00ffb04f
 8000a10:	00ffa857 	.word	0x00ffa857
 8000a14:	00ffa25d 	.word	0x00ffa25d
 8000a18:	00ff9867 	.word	0x00ff9867
 8000a1c:	00ff906f 	.word	0x00ff906f
 8000a20:	00ff6897 	.word	0x00ff6897
 8000a24:	00ff629d 	.word	0x00ff629d
 8000a28:	00ff5aa5 	.word	0x00ff5aa5
 8000a2c:	00ff4ab5 	.word	0x00ff4ab5
 8000a30:	00ff38c7 	.word	0x00ff38c7
 8000a34:	00ff22dd 	.word	0x00ff22dd
 8000a38:	00ff18e7 	.word	0x00ff18e7
 8000a3c:	00ff02fd 	.word	0x00ff02fd
 8000a40:	00ff10ef 	.word	0x00ff10ef

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	; 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fa34 	bl	8002ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ab0:	23c0      	movs	r3, #192	; 0xc0
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ab8:	2309      	movs	r3, #9
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f987 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f8e4 	bl	8000c98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad0:	f001 f930 	bl	8001d34 <HAL_PWREx_EnableOverDrive>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ada:	f000 f8dd 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2106      	movs	r1, #6
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fc0d 	bl	800231c <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b08:	f000 f8c6 	bl	8000c98 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	; 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_I2C1_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MX_I2C1_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b58:	f000 fcd2 	bl	8001500 <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 f899 	bl	8000c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b6a:	f001 f84b 	bl	8001c04 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 f890 	bl	8000c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_I2C1_Init+0x74>)
 8000b7c:	f001 f88d 	bl	8001c9a <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f887 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000028 	.word	0x20000028
 8000b94:	40005400 	.word	0x40005400
 8000b98:	00c0eaff 	.word	0x00c0eaff

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000c18:	481c      	ldr	r0, [pc, #112]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c1a:	f000 fc57 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c24:	481a      	ldr	r0, [pc, #104]	; (8000c90 <MX_GPIO_Init+0xf4>)
 8000c26:	f000 fc51 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 8000c2a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c44:	f000 fa7e 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000c5c:	f000 fa72 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_GPIO_Init+0xf4>)
 8000c7a:	f000 fa63 	bl	8001144 <HAL_GPIO_Init>

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021800 	.word	0x40021800

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0aa      	sub	sp, #168	; 0xa8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2284      	movs	r2, #132	; 0x84
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f8d7 	bl	8002ec0 <memset>
  if(hi2c->Instance==I2C1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <HAL_I2C_MspInit+0xb4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d13c      	bne.n	8000d96 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fcb4 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d36:	f7ff ffaf 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <HAL_I2C_MspInit+0xbc>)
 8000d7a:	f000 f9e3 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_I2C_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	37a8      	adds	r7, #168	; 0xa8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f87a 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 f811 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fc8d 	bl	8000774 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e68:	08002f08 	.word	0x08002f08
  ldr r2, =_sbss
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e70:	20000078 	.word	0x20000078

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>

08000e76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7a:	2003      	movs	r0, #3
 8000e7c:	f000 f92e 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e80:	200f      	movs	r0, #15
 8000e82:	f000 f805 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e86:	f7ff ff0d 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f93b 	bl	800112a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f911 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000004 	.word	0x20000004

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000074 	.word	0x20000074

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000074 	.word	0x20000074

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0000 	.word	0x05fa0000

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e175      	b.n	8001450 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8164 	bne.w	800144a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_GPIO_Init+0x56>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b03      	cmp	r3, #3
 8001206:	d017      	beq.n	8001238 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	69b9      	ldr	r1, [r7, #24]
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80be 	beq.w	800144a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b66      	ldr	r3, [pc, #408]	; (8001468 <HAL_GPIO_Init+0x324>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_GPIO_Init+0x324>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_GPIO_Init+0x324>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012e6:	4a61      	ldr	r2, [pc, #388]	; (800146c <HAL_GPIO_Init+0x328>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_GPIO_Init+0x32c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d037      	beq.n	8001382 <HAL_GPIO_Init+0x23e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a57      	ldr	r2, [pc, #348]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d031      	beq.n	800137e <HAL_GPIO_Init+0x23a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a56      	ldr	r2, [pc, #344]	; (8001478 <HAL_GPIO_Init+0x334>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x236>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a55      	ldr	r2, [pc, #340]	; (800147c <HAL_GPIO_Init+0x338>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x232>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a54      	ldr	r2, [pc, #336]	; (8001480 <HAL_GPIO_Init+0x33c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x22e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a53      	ldr	r2, [pc, #332]	; (8001484 <HAL_GPIO_Init+0x340>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x22a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a52      	ldr	r2, [pc, #328]	; (8001488 <HAL_GPIO_Init+0x344>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x226>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_GPIO_Init+0x348>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x222>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a50      	ldr	r2, [pc, #320]	; (8001490 <HAL_GPIO_Init+0x34c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x21e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x21a>
 800135a:	2309      	movs	r3, #9
 800135c:	e012      	b.n	8001384 <HAL_GPIO_Init+0x240>
 800135e:	230a      	movs	r3, #10
 8001360:	e010      	b.n	8001384 <HAL_GPIO_Init+0x240>
 8001362:	2308      	movs	r3, #8
 8001364:	e00e      	b.n	8001384 <HAL_GPIO_Init+0x240>
 8001366:	2307      	movs	r3, #7
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x240>
 800136a:	2306      	movs	r3, #6
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x240>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x240>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x240>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x240>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x240>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x240>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x328>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <HAL_GPIO_Init+0x354>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a34      	ldr	r2, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x354>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <HAL_GPIO_Init+0x354>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <HAL_GPIO_Init+0x354>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <HAL_GPIO_Init+0x354>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_GPIO_Init+0x354>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_GPIO_Init+0x354>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_GPIO_Init+0x354>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae86 	bls.w	8001164 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40021c00 	.word	0x40021c00
 8001490:	40022000 	.word	0x40022000
 8001494:	40022400 	.word	0x40022400
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fbe0 	bl	8000cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e006      	b.n	8001588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d104      	bne.n	800159a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_I2C_Init+0x11c>)
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69d9      	ldr	r1, [r3, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	02008000 	.word	0x02008000

08001620 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af02      	add	r7, sp, #8
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	460b      	mov	r3, r1
 800162e:	817b      	strh	r3, [r7, #10]
 8001630:	4613      	mov	r3, r2
 8001632:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b20      	cmp	r3, #32
 800163e:	f040 80da 	bne.w	80017f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_I2C_Master_Transmit+0x30>
 800164c:	2302      	movs	r3, #2
 800164e:	e0d3      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001658:	f7ff fc5e 	bl	8000f18 <HAL_GetTick>
 800165c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2319      	movs	r3, #25
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f8f0 	bl	8001850 <I2C_WaitOnFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0be      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2221      	movs	r2, #33	; 0x21
 800167e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2210      	movs	r2, #16
 8001686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	893a      	ldrh	r2, [r7, #8]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2bff      	cmp	r3, #255	; 0xff
 80016aa:	d90e      	bls.n	80016ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	22ff      	movs	r2, #255	; 0xff
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	8979      	ldrh	r1, [r7, #10]
 80016ba:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_I2C_Master_Transmit+0x1e0>)
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fa6c 	bl	8001ba0 <I2C_TransferConfig>
 80016c8:	e06c      	b.n	80017a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	8979      	ldrh	r1, [r7, #10]
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_I2C_Master_Transmit+0x1e0>)
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 fa5b 	bl	8001ba0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016ea:	e05b      	b.n	80017a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	6a39      	ldr	r1, [r7, #32]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f8ed 	bl	80018d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e07b      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d034      	beq.n	80017a4 <HAL_I2C_Master_Transmit+0x184>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	2b00      	cmp	r3, #0
 8001740:	d130      	bne.n	80017a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f87f 	bl	8001850 <I2C_WaitOnFlagUntilTimeout>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e04d      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d90e      	bls.n	8001784 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	22ff      	movs	r2, #255	; 0xff
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	b2da      	uxtb	r2, r3
 8001772:	8979      	ldrh	r1, [r7, #10]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fa0f 	bl	8001ba0 <I2C_TransferConfig>
 8001782:	e00f      	b.n	80017a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f9fe 	bl	8001ba0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d19e      	bne.n	80016ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f8cc 	bl	8001950 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e01a      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2220      	movs	r2, #32
 80017c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_I2C_Master_Transmit+0x1e4>)
 80017d6:	400b      	ands	r3, r1
 80017d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2220      	movs	r2, #32
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
  }
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	80002000 	.word	0x80002000
 8001804:	fe00e800 	.word	0xfe00e800

08001808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d103      	bne.n	8001826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d007      	beq.n	8001844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	619a      	str	r2, [r3, #24]
  }
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001860:	e022      	b.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d01e      	beq.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186a:	f7ff fb55 	bl	8000f18 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d113      	bne.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f043 0220 	orr.w	r2, r3, #32
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e00f      	b.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4013      	ands	r3, r2
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d0cd      	beq.n	8001862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018dc:	e02c      	b.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f870 	bl	80019c8 <I2C_IsErrorOccurred>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e02a      	b.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d01e      	beq.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7ff fb0d 	bl	8000f18 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	429a      	cmp	r2, r3
 8001908:	d302      	bcc.n	8001910 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d113      	bne.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e007      	b.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d1cb      	bne.n	80018de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800195c:	e028      	b.n	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f830 	bl	80019c8 <I2C_IsErrorOccurred>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e026      	b.n	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff fad1 	bl	8000f18 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d302      	bcc.n	8001988 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d113      	bne.n	80019b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e007      	b.n	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d1cf      	bne.n	800195e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d075      	beq.n	8001ae0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2210      	movs	r2, #16
 80019fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019fc:	e056      	b.n	8001aac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d052      	beq.n	8001aac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a06:	f7ff fa87 	bl	8000f18 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <I2C_IsErrorOccurred+0x54>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d147      	bne.n	8001aac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a3e:	d12e      	bne.n	8001a9e <I2C_IsErrorOccurred+0xd6>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a46:	d02a      	beq.n	8001a9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d027      	beq.n	8001a9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a5c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a5e:	f7ff fa5b 	bl	8000f18 <HAL_GetTick>
 8001a62:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a64:	e01b      	b.n	8001a9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a66:	f7ff fa57 	bl	8000f18 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b19      	cmp	r3, #25
 8001a72:	d914      	bls.n	8001a9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d1dc      	bne.n	8001a66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d003      	beq.n	8001ac2 <I2C_IsErrorOccurred+0xfa>
 8001aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d09d      	beq.n	80019fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01c      	beq.n	8001b90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fe56 	bl	8001808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6859      	ldr	r1, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <I2C_IsErrorOccurred+0x1d4>)
 8001b68:	400b      	ands	r3, r1
 8001b6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	817b      	strh	r3, [r7, #10]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bb2:	897b      	ldrh	r3, [r7, #10]
 8001bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bb8:	7a7b      	ldrb	r3, [r7, #9]
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bc0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	0d5b      	lsrs	r3, r3, #21
 8001bda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <I2C_TransferConfig+0x60>)
 8001be0:	430b      	orrs	r3, r1
 8001be2:	43db      	mvns	r3, r3
 8001be4:	ea02 0103 	and.w	r1, r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	03ff63ff 	.word	0x03ff63ff

08001c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d138      	bne.n	8001c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e032      	b.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d139      	bne.n	8001d24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e033      	b.n	8001d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2224      	movs	r2, #36	; 0x24
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a22      	ldr	r2, [pc, #136]	; (8001dcc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d62:	f7ff f8d9 	bl	8000f18 <HAL_GetTick>
 8001d66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d68:	e009      	b.n	8001d7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d6a:	f7ff f8d5 	bl	8000f18 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d78:	d901      	bls.n	8001d7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e022      	b.n	8001dc4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff f8be 	bl	8000f18 <HAL_GetTick>
 8001d9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d9e:	e009      	b.n	8001db4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001da0:	f7ff f8ba 	bl	8000f18 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dae:	d901      	bls.n	8001db4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e007      	b.n	8001dc4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dc0:	d1ee      	bne.n	8001da0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e291      	b.n	800230e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8087 	beq.w	8001f06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df8:	4b96      	ldr	r3, [pc, #600]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d00c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e04:	4b93      	ldr	r3, [pc, #588]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d112      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62>
 8001e10:	4b90      	ldr	r3, [pc, #576]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1c:	d10b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	4b8d      	ldr	r3, [pc, #564]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d06c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x130>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d168      	bne.n	8001f04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e26b      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7a>
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a83      	ldr	r2, [pc, #524]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e02e      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x9c>
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7b      	ldr	r2, [pc, #492]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0xc0>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xd8>
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a6e      	ldr	r2, [pc, #440]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f830 	bl	8000f18 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f82c 	bl	8000f18 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e21f      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xe8>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f81c 	bl	8000f18 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f818 	bl	8000f18 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e20b      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x110>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d069      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x190>
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1df      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	493d      	ldr	r1, [pc, #244]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e040      	b.n	8001fe6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d023      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a38      	ldr	r2, [pc, #224]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ffce 	bl	8000f18 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe ffca 	bl	8000f18 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1bd      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4929      	ldr	r1, [pc, #164]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
 8001fb2:	e018      	b.n	8001fe6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ffaa 	bl	8000f18 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ffa6 	bl	8000f18 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e199      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d038      	beq.n	8002064 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7fe ff87 	bl	8000f18 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7fe ff83 	bl	8000f18 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e176      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8002022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x23a>
 800202c:	e01a      	b.n	8002064 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_RCC_OscConfig+0x280>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7fe ff6d 	bl	8000f18 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7fe ff69 	bl	8000f18 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d903      	bls.n	8002058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e15c      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
 8002054:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a4 	beq.w	80021ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b82      	ldr	r3, [pc, #520]	; (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020a6:	4b7f      	ldr	r3, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7e      	ldr	r2, [pc, #504]	; (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff31 	bl	8000f18 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff2d 	bl	8000f18 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e120      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x31a>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x33c>
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a69      	ldr	r2, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x35e>
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
 8002124:	4b5e      	ldr	r3, [pc, #376]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x376>
 8002132:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a5a      	ldr	r2, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe fee1 	bl	8000f18 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fedd 	bl	8000f18 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0ce      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x386>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fecb 	bl	8000f18 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fec7 	bl	8000f18 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e0b8      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a4 	beq.w	800230c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d06b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d149      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fe98 	bl	8000f18 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fe94 	bl	8000f18 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e087      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	4313      	orrs	r3, r2
 8002230:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002236:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe68 	bl	8000f18 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fe64 	bl	8000f18 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e057      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x478>
 800226a:	e04f      	b.n	800230c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fe4e 	bl	8000f18 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fe4a 	bl	8000f18 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03d      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x4ac>
 800229e:	e035      	b.n	800230c <HAL_RCC_OscConfig+0x538>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x544>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d028      	beq.n	8002308 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d121      	bne.n	8002308 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d11a      	bne.n	8002308 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d111      	bne.n	8002308 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	3b01      	subs	r3, #1
 80022f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0d0      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b67      	ldr	r3, [pc, #412]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	4965      	ldr	r1, [pc, #404]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e073      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7fe fd82 	bl	8000f18 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fd7e 	bl	8000f18 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e053      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d210      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 020f 	bic.w	r2, r3, #15
 8002456:	4922      	ldr	r1, [pc, #136]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	; (80024e8 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1d0>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fcde 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08002ee8 	.word	0x08002ee8
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000004 	.word	0x20000004

080024f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b090      	sub	sp, #64	; 0x40
 80024fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d00d      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x40>
 8002518:	2b08      	cmp	r3, #8
 800251a:	f200 80a1 	bhi.w	8002660 <HAL_RCC_GetSysClockFreq+0x16c>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x34>
 8002522:	2b04      	cmp	r3, #4
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x3a>
 8002526:	e09b      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_GetSysClockFreq+0x184>)
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800252c:	e09b      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_GetSysClockFreq+0x188>)
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002532:	e098      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002534:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800253e:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d028      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	099b      	lsrs	r3, r3, #6
 8002550:	2200      	movs	r2, #0
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	627a      	str	r2, [r7, #36]	; 0x24
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800255c:	2100      	movs	r1, #0
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_GetSysClockFreq+0x188>)
 8002560:	fb03 f201 	mul.w	r2, r3, r1
 8002564:	2300      	movs	r3, #0
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	4413      	add	r3, r2
 800256c:	4a43      	ldr	r2, [pc, #268]	; (800267c <HAL_RCC_GetSysClockFreq+0x188>)
 800256e:	fba0 1202 	umull	r1, r2, r0, r2
 8002572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002574:	460a      	mov	r2, r1
 8002576:	62ba      	str	r2, [r7, #40]	; 0x28
 8002578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257a:	4413      	add	r3, r2
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	2200      	movs	r2, #0
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	61fa      	str	r2, [r7, #28]
 8002586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800258e:	f7fd fe3b 	bl	8000208 <__aeabi_uldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4613      	mov	r3, r2
 8002598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800259a:	e053      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	2200      	movs	r2, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	617a      	str	r2, [r7, #20]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ae:	f04f 0b00 	mov.w	fp, #0
 80025b2:	4652      	mov	r2, sl
 80025b4:	465b      	mov	r3, fp
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	ebb2 080a 	subs.w	r8, r2, sl
 80025ce:	eb63 090b 	sbc.w	r9, r3, fp
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025e6:	ebb2 0408 	subs.w	r4, r2, r8
 80025ea:	eb63 0509 	sbc.w	r5, r3, r9
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	00eb      	lsls	r3, r5, #3
 80025f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fc:	00e2      	lsls	r2, r4, #3
 80025fe:	4614      	mov	r4, r2
 8002600:	461d      	mov	r5, r3
 8002602:	eb14 030a 	adds.w	r3, r4, sl
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	eb45 030b 	adc.w	r3, r5, fp
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261a:	4629      	mov	r1, r5
 800261c:	028b      	lsls	r3, r1, #10
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002624:	4621      	mov	r1, r4
 8002626:	028a      	lsls	r2, r1, #10
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	2200      	movs	r2, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002638:	f7fd fde6 	bl	8000208 <__aeabi_uldivmod>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4613      	mov	r3, r2
 8002642:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_GetSysClockFreq+0x180>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c1b      	lsrs	r3, r3, #16
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	3301      	adds	r3, #1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800265e:	e002      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetSysClockFreq+0x184>)
 8002662:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002668:	4618      	mov	r0, r3
 800266a:	3740      	adds	r7, #64	; 0x40
 800266c:	46bd      	mov	sp, r7
 800266e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	00f42400 	.word	0x00f42400
 800267c:	017d7840 	.word	0x017d7840

08002680 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a68      	ldr	r2, [pc, #416]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	4964      	ldr	r1, [pc, #400]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d017      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f2:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	4959      	ldr	r1, [pc, #356]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d017      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800272e:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	494a      	ldr	r1, [pc, #296]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800274c:	d101      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 808b 	beq.w	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a39      	ldr	r2, [pc, #228]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
 8002788:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fbba 	bl	8000f18 <HAL_GetTick>
 80027a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7fe fbb6 	bl	8000f18 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e357      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d035      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d02e      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002804:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d114      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fb7e 	bl	8000f18 <HAL_GetTick>
 800281c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	e00a      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fb7a 	bl	8000f18 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e319      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800284e:	d111      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800285e:	400b      	ands	r3, r1
 8002860:	4901      	ldr	r1, [pc, #4]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
 8002866:	e00b      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	0ffffcff 	.word	0x0ffffcff
 8002874:	4baa      	ldr	r3, [pc, #680]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4aa9      	ldr	r2, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	4ba7      	ldr	r3, [pc, #668]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	49a4      	ldr	r1, [pc, #656]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	4313      	orrs	r3, r2
 8002890:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800289e:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a4:	4a9e      	ldr	r2, [pc, #632]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ae:	4b9c      	ldr	r3, [pc, #624]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	4999      	ldr	r1, [pc, #612]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028cc:	4b94      	ldr	r3, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028da:	4991      	ldr	r1, [pc, #580]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fc:	4988      	ldr	r1, [pc, #544]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002910:	4b83      	ldr	r3, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800291e:	4980      	ldr	r1, [pc, #512]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002932:	4b7b      	ldr	r3, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4977      	ldr	r1, [pc, #476]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002954:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	496f      	ldr	r1, [pc, #444]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002976:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f023 020c 	bic.w	r2, r3, #12
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	4966      	ldr	r1, [pc, #408]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002998:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	495e      	ldr	r1, [pc, #376]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ba:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	4955      	ldr	r1, [pc, #340]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029fe:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4944      	ldr	r1, [pc, #272]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	493c      	ldr	r1, [pc, #240]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a50:	4933      	ldr	r1, [pc, #204]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a64:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a72:	492b      	ldr	r1, [pc, #172]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d011      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a94:	4922      	ldr	r1, [pc, #136]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	4912      	ldr	r1, [pc, #72]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af8:	4909      	ldr	r1, [pc, #36]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d006      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80d9 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b14:	4b02      	ldr	r3, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a01      	ldr	r2, [pc, #4]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b26:	f7fe f9f7 	bl	8000f18 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b2e:	f7fe f9f3 	bl	8000f18 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	; 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e194      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b40:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d021      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11d      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b60:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b6e:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b74:	0e1b      	lsrs	r3, r3, #24
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	019a      	lsls	r2, r3, #6
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	071b      	lsls	r3, r3, #28
 8002b94:	4957      	ldr	r1, [pc, #348]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	d129      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bdc:	0f1b      	lsrs	r3, r3, #28
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	019a      	lsls	r2, r3, #6
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	071b      	lsls	r3, r3, #28
 8002bfc:	493d      	ldr	r1, [pc, #244]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0a:	f023 021f 	bic.w	r2, r3, #31
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4937      	ldr	r1, [pc, #220]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01d      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2e:	0e1b      	lsrs	r3, r3, #24
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3c:	0f1b      	lsrs	r3, r3, #28
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	019a      	lsls	r2, r3, #6
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	071b      	lsls	r3, r3, #28
 8002c5c:	4925      	ldr	r1, [pc, #148]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	019a      	lsls	r2, r3, #6
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	071b      	lsls	r3, r3, #28
 8002c8c:	4919      	ldr	r1, [pc, #100]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f93a 	bl	8000f18 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ca8:	f7fe f936 	bl	8000f18 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0d7      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 80cd 	bne.w	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cda:	f7fe f91d 	bl	8000f18 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ce2:	f7fe f919 	bl	8000f18 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	; 0x64
 8002cee:	d903      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0ba      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002cf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d04:	d0ed      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02e      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d12a      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d2e:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	0f1b      	lsrs	r3, r3, #28
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	4944      	ldr	r1, [pc, #272]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	493d      	ldr	r1, [pc, #244]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d022      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d98:	d11d      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	0f1b      	lsrs	r3, r3, #28
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	019a      	lsls	r2, r3, #6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	4929      	ldr	r1, [pc, #164]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4917      	ldr	r1, [pc, #92]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	4911      	ldr	r1, [pc, #68]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f86a 	bl	8000f18 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e48:	f7fe f866 	bl	8000f18 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e007      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e66:	d1ef      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4d0d      	ldr	r5, [pc, #52]	; (8002eb0 <__libc_init_array+0x38>)
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	; (8002eb4 <__libc_init_array+0x3c>)
 8002e7e:	1b64      	subs	r4, r4, r5
 8002e80:	10a4      	asrs	r4, r4, #2
 8002e82:	2600      	movs	r6, #0
 8002e84:	42a6      	cmp	r6, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	4d0b      	ldr	r5, [pc, #44]	; (8002eb8 <__libc_init_array+0x40>)
 8002e8a:	4c0c      	ldr	r4, [pc, #48]	; (8002ebc <__libc_init_array+0x44>)
 8002e8c:	f000 f820 	bl	8002ed0 <_init>
 8002e90:	1b64      	subs	r4, r4, r5
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	2600      	movs	r6, #0
 8002e96:	42a6      	cmp	r6, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea0:	4798      	blx	r3
 8002ea2:	3601      	adds	r6, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eaa:	4798      	blx	r3
 8002eac:	3601      	adds	r6, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	08002f00 	.word	0x08002f00
 8002eb4:	08002f00 	.word	0x08002f00
 8002eb8:	08002f00 	.word	0x08002f00
 8002ebc:	08002f04 	.word	0x08002f04

08002ec0 <memset>:
 8002ec0:	4402      	add	r2, r0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d100      	bne.n	8002eca <memset+0xa>
 8002ec8:	4770      	bx	lr
 8002eca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ece:	e7f9      	b.n	8002ec4 <memset+0x4>

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
