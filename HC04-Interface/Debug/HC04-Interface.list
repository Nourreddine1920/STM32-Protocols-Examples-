
HC04-Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a30  08003a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003a44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003a44  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af0a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001905  00000000  00000000  0002af46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002d000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024273  00000000  00000000  0002d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a50c  00000000  00000000  0005198b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ed3  00000000  00000000  0005be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dd6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e20  00000000  00000000  0013ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080039cc 	.word	0x080039cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080039cc 	.word	0x080039cc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fa80 	bl	8000a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f861 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8fd 	bl	8000718 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800051e:	f000 f8cb 	bl	80006b8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, RX_BUFFER, BUFFER_LEN);
 8000522:	2201      	movs	r2, #1
 8000524:	4926      	ldr	r1, [pc, #152]	; (80005c0 <main+0xb4>)
 8000526:	4827      	ldr	r0, [pc, #156]	; (80005c4 <main+0xb8>)
 8000528:	f002 f823 	bl	8002572 <HAL_UART_Receive_IT>
  uint8_t data0[] = "UART PROTOCOL \r\n";
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <main+0xbc>)
 800052e:	f107 041c 	add.w	r4, r7, #28
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit (&huart6, data0, sizeof (data0), 100);
 800053c:	f107 011c 	add.w	r1, r7, #28
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	2211      	movs	r2, #17
 8000544:	481f      	ldr	r0, [pc, #124]	; (80005c4 <main+0xb8>)
 8000546:	f001 ff81 	bl	800244c <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t data1[] = "LED ON \r\n";
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <main+0xc0>)
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	ca07      	ldmia	r2, {r0, r1, r2}
 8000552:	c303      	stmia	r3!, {r0, r1}
 8000554:	801a      	strh	r2, [r3, #0]
	  uint8_t data2[] = "LED OFF \r\n";
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xc4>)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	ca07      	ldmia	r2, {r0, r1, r2}
 800055c:	c303      	stmia	r3!, {r0, r1}
 800055e:	801a      	strh	r2, [r3, #0]
 8000560:	3302      	adds	r3, #2
 8000562:	0c12      	lsrs	r2, r2, #16
 8000564:	701a      	strb	r2, [r3, #0]


	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <main+0xc8>)
 800056e:	f000 fe3b 	bl	80011e8 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == 1){
 8000572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000576:	4818      	ldr	r0, [pc, #96]	; (80005d8 <main+0xcc>)
 8000578:	f000 fe1e 	bl	80011b8 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10d      	bne.n	800059e <main+0x92>
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <main+0xc8>)
 800058a:	f000 fe2d 	bl	80011e8 <HAL_GPIO_WritePin>
	        HAL_UART_Transmit (&huart6, data1, sizeof (data1), 100);
 800058e:	f107 0110 	add.w	r1, r7, #16
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	220a      	movs	r2, #10
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <main+0xb8>)
 8000598:	f001 ff58 	bl	800244c <HAL_UART_Transmit>
 800059c:	e00b      	b.n	80005b6 <main+0xaa>


	    }else{
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0xc8>)
 80005a6:	f000 fe1f 	bl	80011e8 <HAL_GPIO_WritePin>
	  	  HAL_UART_Transmit (&huart6, data2, sizeof (data2), 100);
 80005aa:	1d39      	adds	r1, r7, #4
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	220b      	movs	r2, #11
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <main+0xb8>)
 80005b2:	f001 ff4b 	bl	800244c <HAL_UART_Transmit>

	     }
	  HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f000 fa89 	bl	8000ad0 <HAL_Delay>
  {
 80005be:	e7c4      	b.n	800054a <main+0x3e>
 80005c0:	200000ac 	.word	0x200000ac
 80005c4:	20000028 	.word	0x20000028
 80005c8:	080039e4 	.word	0x080039e4
 80005cc:	080039f8 	.word	0x080039f8
 80005d0:	08003a04 	.word	0x08003a04
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40022000 	.word	0x40022000

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f9e6 	bl	80039bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <SystemClock_Config+0xd4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xd8>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000644:	2319      	movs	r3, #25
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000648:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000652:	2309      	movs	r3, #9
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fe2e 	bl	80012bc <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000666:	f000 f8d7 	bl	8000818 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066a:	f000 fdd7 	bl	800121c <HAL_PWREx_EnableOverDrive>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f8d0 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2106      	movs	r1, #6
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f8b4 	bl	8001804 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006a2:	f000 f8b9 	bl	8000818 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART6_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART6_UART_Init+0x58>)
 80006fc:	f001 fe58 	bl	80023b0 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f887 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028
 8000714:	40011400 	.word	0x40011400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a2a      	ldr	r2, [pc, #168]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_GPIO_Init+0xc4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <MX_GPIO_Init+0xc4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xc4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xc4>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xc8>)
 8000796:	f000 fd27 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800079a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_GPIO_Init+0xcc>)
 80007b0:	f000 fb56 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xc8>)
 80007ce:	f000 fb47 	bl	8000e60 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart6.Instance)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_UART_RxCpltCallback+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d104      	bne.n	8000806 <HAL_UART_RxCpltCallback+0x1e>
    {
    HAL_UART_Receive_IT(&huart6, RX_BUFFER, BUFFER_LEN);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4905      	ldr	r1, [pc, #20]	; (8000814 <HAL_UART_RxCpltCallback+0x2c>)
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <HAL_UART_RxCpltCallback+0x28>)
 8000802:	f001 feb6 	bl	8002572 <HAL_UART_Receive_IT>
    }
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000028 	.word	0x20000028
 8000814:	200000ac 	.word	0x200000ac

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	; 0x40
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0aa      	sub	sp, #168	; 0xa8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	2284      	movs	r2, #132	; 0x84
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f003 f895 	bl	80039bc <memset>
  if(huart->Instance==USART6)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <HAL_UART_MspInit+0xc0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d143      	bne.n	8000924 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800089c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 f990 	bl	8001bd0 <HAL_RCCEx_PeriphCLKConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008b6:	f7ff ffaf 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_UART_MspInit+0xc4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000902:	2308      	movs	r3, #8
 8000904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000908:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800090c:	4619      	mov	r1, r3
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <HAL_UART_MspInit+0xc8>)
 8000910:	f000 faa6 	bl	8000e60 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2047      	movs	r0, #71	; 0x47
 800091a:	f000 f9d8 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800091e:	2047      	movs	r0, #71	; 0x47
 8000920:	f000 f9f1 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	37a8      	adds	r7, #168	; 0xa8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40011400 	.word	0x40011400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f884 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART6_IRQHandler+0x10>)
 8000992:	f001 fe3d 	bl	8002610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028

080009a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd7 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 ffbf 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fd89 	bl	800050c <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08003a38 	.word	0x08003a38
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	200000b4 	.word	0x200000b4

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>

08000a16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	f000 f94c 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a20:	200f      	movs	r0, #15
 8000a22:	f000 f805 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a26:	f7ff fefd 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f967 	bl	8000d22 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f92f 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000b0 	.word	0x200000b0

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000b0 	.word	0x200000b0

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <__NVIC_SetPriorityGrouping+0x40>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x40>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	05fa0000 	.word	0x05fa0000

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff29 	bl	8000b18 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff3e 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff31 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d48:	f7ff feb6 	bl	8000ab8 <HAL_GetTick>
 8000d4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e052      	b.n	8000e12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0216 	bic.w	r2, r2, #22
 8000d7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <HAL_DMA_Abort+0x62>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d007      	beq.n	8000dac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 0208 	bic.w	r2, r2, #8
 8000daa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dbc:	e013      	b.n	8000de6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dbe:	f7ff fe7b 	bl	8000ab8 <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d90c      	bls.n	8000de6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2220      	movs	r2, #32
 8000dd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e015      	b.n	8000e12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1e4      	bne.n	8000dbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000df8:	223f      	movs	r2, #63	; 0x3f
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d004      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e00c      	b.n	8000e52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e175      	b.n	800116c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8164 	bne.w	8001166 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x56>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80be 	beq.w	8001166 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b66      	ldr	r3, [pc, #408]	; (8001184 <HAL_GPIO_Init+0x324>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a65      	ldr	r2, [pc, #404]	; (8001184 <HAL_GPIO_Init+0x324>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <HAL_GPIO_Init+0x324>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001002:	4a61      	ldr	r2, [pc, #388]	; (8001188 <HAL_GPIO_Init+0x328>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a58      	ldr	r2, [pc, #352]	; (800118c <HAL_GPIO_Init+0x32c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d037      	beq.n	800109e <HAL_GPIO_Init+0x23e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a57      	ldr	r2, [pc, #348]	; (8001190 <HAL_GPIO_Init+0x330>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d031      	beq.n	800109a <HAL_GPIO_Init+0x23a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x334>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d02b      	beq.n	8001096 <HAL_GPIO_Init+0x236>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a55      	ldr	r2, [pc, #340]	; (8001198 <HAL_GPIO_Init+0x338>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x232>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a54      	ldr	r2, [pc, #336]	; (800119c <HAL_GPIO_Init+0x33c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x22e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <HAL_GPIO_Init+0x340>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x22a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x344>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x226>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a51      	ldr	r2, [pc, #324]	; (80011a8 <HAL_GPIO_Init+0x348>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x222>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_GPIO_Init+0x34c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x21e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a4f      	ldr	r2, [pc, #316]	; (80011b0 <HAL_GPIO_Init+0x350>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x21a>
 8001076:	2309      	movs	r3, #9
 8001078:	e012      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800107a:	230a      	movs	r3, #10
 800107c:	e010      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800107e:	2308      	movs	r3, #8
 8001080:	e00e      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 8001082:	2307      	movs	r3, #7
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 8001086:	2306      	movs	r3, #6
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x240>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	; (8001188 <HAL_GPIO_Init+0x328>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_GPIO_Init+0x354>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_GPIO_Init+0x354>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_GPIO_Init+0x354>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a29      	ldr	r2, [pc, #164]	; (80011b4 <HAL_GPIO_Init+0x354>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <HAL_GPIO_Init+0x354>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <HAL_GPIO_Init+0x354>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_GPIO_Init+0x354>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_GPIO_Init+0x354>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f ae86 	bls.w	8000e80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40022400 	.word	0x40022400
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124a:	f7ff fc35 	bl	8000ab8 <HAL_GetTick>
 800124e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001250:	e009      	b.n	8001266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001252:	f7ff fc31 	bl	8000ab8 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001260:	d901      	bls.n	8001266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e022      	b.n	80012ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d1ee      	bne.n	8001252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff fc1a 	bl	8000ab8 <HAL_GetTick>
 8001284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001286:	e009      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001288:	f7ff fc16 	bl	8000ab8 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001296:	d901      	bls.n	800129c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e007      	b.n	80012ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a8:	d1ee      	bne.n	8001288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000

080012bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e291      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8087 	beq.w	80013ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e0:	4b96      	ldr	r3, [pc, #600]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d00c      	beq.n	8001306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ec:	4b93      	ldr	r3, [pc, #588]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d112      	bne.n	800131e <HAL_RCC_OscConfig+0x62>
 80012f8:	4b90      	ldr	r3, [pc, #576]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001304:	d10b      	bne.n	800131e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001306:	4b8d      	ldr	r3, [pc, #564]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d06c      	beq.n	80013ec <HAL_RCC_OscConfig+0x130>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d168      	bne.n	80013ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e26b      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x7a>
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a83      	ldr	r2, [pc, #524]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e02e      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x9c>
 800133e:	4b7f      	ldr	r3, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7e      	ldr	r2, [pc, #504]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b7c      	ldr	r3, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7b      	ldr	r2, [pc, #492]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0xc0>
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a75      	ldr	r2, [pc, #468]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a72      	ldr	r2, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xd8>
 800137c:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6b      	ldr	r2, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fb8c 	bl	8000ab8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fb88 	bl	8000ab8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e21f      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b61      	ldr	r3, [pc, #388]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fb78 	bl	8000ab8 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fb74 	bl	8000ab8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e20b      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x110>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d069      	beq.n	80014ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x190>
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x17a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1df      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	493d      	ldr	r1, [pc, #244]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e040      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fb2a 	bl	8000ab8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fb26 	bl	8000ab8 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1bd      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4929      	ldr	r1, [pc, #164]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
 800149a:	e018      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a26      	ldr	r2, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb06 	bl	8000ab8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fb02 	bl	8000ab8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e199      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d038      	beq.n	800154c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d019      	beq.n	8001516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x280>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fae3 	bl	8000ab8 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fadf 	bl	8000ab8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e176      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x23a>
 8001514:	e01a      	b.n	800154c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x280>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_RCC_OscConfig+0x280>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff fac9 	bl	8000ab8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fac5 	bl	8000ab8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d903      	bls.n	8001540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e15c      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
 800153c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b91      	ldr	r3, [pc, #580]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80a4 	beq.w	80016a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10d      	bne.n	8001582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a87      	ldr	r2, [pc, #540]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800158e:	4b7f      	ldr	r3, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x4d0>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fa8d 	bl	8000ab8 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fa89 	bl	8000ab8 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e120      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	4b75      	ldr	r3, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x31a>
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a6e      	ldr	r2, [pc, #440]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e02d      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x33c>
 80015de:	4b6a      	ldr	r3, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a69      	ldr	r2, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a66      	ldr	r2, [pc, #408]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	e01c      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d10c      	bne.n	800161a <HAL_RCC_OscConfig+0x35e>
 8001600:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a60      	ldr	r2, [pc, #384]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	4b5e      	ldr	r3, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a5d      	ldr	r2, [pc, #372]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
 800161a:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	4a5a      	ldr	r2, [pc, #360]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70
 8001626:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a57      	ldr	r2, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d015      	beq.n	8001666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fa3d 	bl	8000ab8 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fa39 	bl	8000ab8 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0ce      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ee      	beq.n	8001642 <HAL_RCC_OscConfig+0x386>
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fa27 	bl	8000ab8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166e:	f7ff fa23 	bl	8000ab8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	f241 3288 	movw	r2, #5000	; 0x1388
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001684:	4b40      	ldr	r3, [pc, #256]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a3b      	ldr	r2, [pc, #236]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800169c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a4 	beq.w	80017f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d06b      	beq.n	8001790 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d149      	bne.n	8001754 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c0:	4b31      	ldr	r3, [pc, #196]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f9f4 	bl	8000ab8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f9f0 	bl	8000ab8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e087      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	019b      	lsls	r3, r3, #6
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4313      	orrs	r3, r2
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800171a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800171e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f9c4 	bl	8000ab8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9c0 	bl	8000ab8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e057      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x478>
 8001752:	e04f      	b.n	80017f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff f9aa 	bl	8000ab8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f9a6 	bl	8000ab8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e03d      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x4ac>
 8001786:	e035      	b.n	80017f4 <HAL_RCC_OscConfig+0x538>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_OscConfig+0x544>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d028      	beq.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d121      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c0:	4013      	ands	r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	085b      	lsrs	r3, r3, #1
 80017d8:	3b01      	subs	r3, #1
 80017da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d0      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d910      	bls.n	800184c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 020f 	bic.w	r2, r3, #15
 8001832:	4965      	ldr	r1, [pc, #404]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b8      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001864:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	494d      	ldr	r1, [pc, #308]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d040      	beq.n	8001928 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d115      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e073      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e06b      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b39      	ldr	r3, [pc, #228]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4936      	ldr	r1, [pc, #216]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018f8:	f7ff f8de 	bl	8000ab8 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff f8da 	bl	8000ab8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e053      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d210      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 020f 	bic.w	r2, r3, #15
 800193e:	4922      	ldr	r1, [pc, #136]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e032      	b.n	80019be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4916      	ldr	r1, [pc, #88]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001996:	f000 f821 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1cc>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1d0>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f83a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08003a10 	.word	0x08003a10
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b090      	sub	sp, #64	; 0x40
 80019e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	2300      	movs	r3, #0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d00d      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x40>
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	f200 80a1 	bhi.w	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0e:	e09b      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a14:	e09b      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1a:	e098      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a44:	2100      	movs	r1, #0
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a48:	fb03 f201 	mul.w	r2, r3, r1
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	fb00 f303 	mul.w	r3, r0, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a56:	fba0 1202 	umull	r1, r2, r0, r2
 8001a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	4413      	add	r3, r2
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	61fa      	str	r2, [r7, #28]
 8001a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a76:	f7fe fbc7 	bl	8000208 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a82:	e053      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	617a      	str	r2, [r7, #20]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a96:	f04f 0b00 	mov.w	fp, #0
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	465b      	mov	r3, fp
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	0159      	lsls	r1, r3, #5
 8001aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aac:	0150      	lsls	r0, r2, #5
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ab6:	eb63 090b 	sbc.w	r9, r3, fp
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ac6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ace:	ebb2 0408 	subs.w	r4, r2, r8
 8001ad2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	00eb      	lsls	r3, r5, #3
 8001ae0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae4:	00e2      	lsls	r2, r4, #3
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	eb14 030a 	adds.w	r3, r4, sl
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	eb45 030b 	adc.w	r3, r5, fp
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b02:	4629      	mov	r1, r5
 8001b04:	028b      	lsls	r3, r1, #10
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	028a      	lsls	r2, r1, #10
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	2200      	movs	r2, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b20:	f7fe fb72 	bl	8000208 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	017d7840 	.word	0x017d7840

08001b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b84:	f7ff fff0 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0a9b      	lsrs	r3, r3, #10
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08003a20 	.word	0x08003a20

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bac:	f7ff ffdc 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0b5b      	lsrs	r3, r3, #13
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08003a20 	.word	0x08003a20

08001bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d012      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bf8:	4b69      	ldr	r3, [pc, #420]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a68      	ldr	r2, [pc, #416]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c02:	6093      	str	r3, [r2, #8]
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	4964      	ldr	r1, [pc, #400]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d017      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c48:	d101      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d017      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	494a      	ldr	r1, [pc, #296]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c84:	d101      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 808b 	beq.w	8001dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a39      	ldr	r2, [pc, #228]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7fe feee 	bl	8000ab8 <HAL_GetTick>
 8001cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7fe feea 	bl	8000ab8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e357      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d035      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d02e      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d32:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d114      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe feb2 	bl	8000ab8 <HAL_GetTick>
 8001d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d58:	f7fe feae 	bl	8000ab8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e319      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0ee      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d86:	d111      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	4901      	ldr	r1, [pc, #4]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000
 8001da8:	0ffffcff 	.word	0x0ffffcff
 8001dac:	4baa      	ldr	r3, [pc, #680]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4aa9      	ldr	r2, [pc, #676]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001db2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001db6:	6093      	str	r3, [r2, #8]
 8001db8:	4ba7      	ldr	r3, [pc, #668]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	49a4      	ldr	r1, [pc, #656]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dd6:	4ba0      	ldr	r3, [pc, #640]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ddc:	4a9e      	ldr	r2, [pc, #632]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001de6:	4b9c      	ldr	r3, [pc, #624]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	4999      	ldr	r1, [pc, #612]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e04:	4b94      	ldr	r3, [pc, #592]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e12:	4991      	ldr	r1, [pc, #580]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e26:	4b8c      	ldr	r3, [pc, #560]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e34:	4988      	ldr	r1, [pc, #544]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e48:	4b83      	ldr	r3, [pc, #524]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e56:	4980      	ldr	r1, [pc, #512]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4977      	ldr	r1, [pc, #476]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e8c:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	496f      	ldr	r1, [pc, #444]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f023 020c 	bic.w	r2, r3, #12
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	4966      	ldr	r1, [pc, #408]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	495e      	ldr	r1, [pc, #376]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ef2:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f00:	4955      	ldr	r1, [pc, #340]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f36:	4b48      	ldr	r3, [pc, #288]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4944      	ldr	r1, [pc, #272]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	493c      	ldr	r1, [pc, #240]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	4933      	ldr	r1, [pc, #204]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001faa:	492b      	ldr	r1, [pc, #172]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d011      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fcc:	4922      	ldr	r1, [pc, #136]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	4912      	ldr	r1, [pc, #72]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002030:	4909      	ldr	r1, [pc, #36]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d006      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80d9 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a01      	ldr	r2, [pc, #4]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002056:	e001      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002058:	40023800 	.word	0x40023800
 800205c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800205e:	f7fe fd2b 	bl	8000ab8 <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002066:	f7fe fd27 	bl	8000ab8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	; 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e194      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d021      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11d      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020a6:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ac:	0e1b      	lsrs	r3, r3, #24
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	019a      	lsls	r2, r3, #6
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	061b      	lsls	r3, r3, #24
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	071b      	lsls	r3, r3, #28
 80020cc:	4957      	ldr	r1, [pc, #348]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02e      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fe:	d129      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002106:	0c1b      	lsrs	r3, r3, #16
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002114:	0f1b      	lsrs	r3, r3, #28
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	019a      	lsls	r2, r3, #6
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	071b      	lsls	r3, r3, #28
 8002134:	493d      	ldr	r1, [pc, #244]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002142:	f023 021f 	bic.w	r2, r3, #31
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	4937      	ldr	r1, [pc, #220]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01d      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002166:	0e1b      	lsrs	r3, r3, #24
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002174:	0f1b      	lsrs	r3, r3, #28
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	019a      	lsls	r2, r3, #6
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	431a      	orrs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	071b      	lsls	r3, r3, #28
 8002194:	4925      	ldr	r1, [pc, #148]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d011      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	019a      	lsls	r2, r3, #6
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	071b      	lsls	r3, r3, #28
 80021c4:	4919      	ldr	r1, [pc, #100]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d8:	f7fe fc6e 	bl	8000ab8 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021e0:	f7fe fc6a 	bl	8000ab8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0d7      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 80cd 	bne.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002212:	f7fe fc51 	bl	8000ab8 <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800221a:	f7fe fc4d 	bl	8000ab8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	; 0x64
 8002226:	d903      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0ba      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800222c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002230:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800223c:	d0ed      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800225a:	2b00      	cmp	r3, #0
 800225c:	d02e      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002266:	4b51      	ldr	r3, [pc, #324]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002274:	4b4d      	ldr	r3, [pc, #308]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	0f1b      	lsrs	r3, r3, #28
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	019a      	lsls	r2, r3, #6
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	071b      	lsls	r3, r3, #28
 800229a:	4944      	ldr	r1, [pc, #272]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022a2:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	493d      	ldr	r1, [pc, #244]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d022      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d0:	d11d      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	0e1b      	lsrs	r3, r3, #24
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	0f1b      	lsrs	r3, r3, #28
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	019a      	lsls	r2, r3, #6
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	431a      	orrs	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	071b      	lsls	r3, r3, #28
 8002306:	4929      	ldr	r1, [pc, #164]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	0e1b      	lsrs	r3, r3, #24
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	019a      	lsls	r2, r3, #6
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	431a      	orrs	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	071b      	lsls	r3, r3, #28
 800234e:	4917      	ldr	r1, [pc, #92]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800235c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	4911      	ldr	r1, [pc, #68]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002378:	f7fe fb9e 	bl	8000ab8 <HAL_GetTick>
 800237c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002380:	f7fe fb9a 	bl	8000ab8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e007      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800239a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239e:	d1ef      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e040      	b.n	8002444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fa4a 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	; 0x24
 80023dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fbf8 	bl	8002be4 <UART_SetConfig>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e022      	b.n	8002444 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fe50 	bl	80030ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fed7 	bl	80031f0 <UART_CheckIdleState>
 8002442:	4603      	mov	r3, r0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002460:	2b20      	cmp	r3, #32
 8002462:	f040 8081 	bne.w	8002568 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_UART_Transmit+0x26>
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e079      	b.n	800256a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_UART_Transmit+0x38>
 8002480:	2302      	movs	r3, #2
 8002482:	e072      	b.n	800256a <HAL_UART_Transmit+0x11e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2221      	movs	r2, #33	; 0x21
 8002498:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249a:	f7fe fb0d 	bl	8000ab8 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d108      	bne.n	80024cc <HAL_UART_Transmit+0x80>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e003      	b.n	80024d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80024dc:	e02c      	b.n	8002538 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 feb4 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e038      	b.n	800256a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	3302      	adds	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
 8002514:	e007      	b.n	8002526 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3301      	adds	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1cc      	bne.n	80024de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fe81 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e005      	b.n	800256a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2220      	movs	r2, #32
 8002562:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b08a      	sub	sp, #40	; 0x28
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002584:	2b20      	cmp	r3, #32
 8002586:	d13d      	bne.n	8002604 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_UART_Receive_IT+0x22>
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e036      	b.n	8002606 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Receive_IT+0x34>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e02f      	b.n	8002606 <HAL_UART_Receive_IT+0x94>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	e853 3f00 	ldrex	r3, [r3]
 80025ce:	613b      	str	r3, [r7, #16]
   return(result);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e4:	69f9      	ldr	r1, [r7, #28]
 80025e6:	6a3a      	ldr	r2, [r7, #32]
 80025e8:	e841 2300 	strex	r3, r2, [r1]
 80025ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e6      	bne.n	80025c2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fef0 	bl	80033e0 <UART_Start_Receive_IT>
 8002600:	4603      	mov	r3, r0
 8002602:	e000      	b.n	8002606 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0ba      	sub	sp, #232	; 0xe8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800263a:	f640 030f 	movw	r3, #2063	; 0x80f
 800263e:	4013      	ands	r3, r2
 8002640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d115      	bne.n	8002678 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800264c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00f      	beq.n	8002678 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 828f 	beq.w	8002b8c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
      }
      return;
 8002676:	e289      	b.n	8002b8c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8117 	beq.w	80028b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800268e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002692:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_UART_IRQHandler+0x298>)
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 810a 	beq.w	80028b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800269c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d011      	beq.n	80026cc <HAL_UART_IRQHandler+0xbc>
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d011      	beq.n	80026fc <HAL_UART_IRQHandler+0xec>
 80026d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2202      	movs	r2, #2
 80026ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d011      	beq.n	800272c <HAL_UART_IRQHandler+0x11c>
 8002708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2204      	movs	r2, #4
 800271a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002722:	f043 0202 	orr.w	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800272c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d017      	beq.n	8002768 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002748:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2208      	movs	r2, #8
 8002756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275e:	f043 0208 	orr.w	r2, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_UART_IRQHandler+0x18a>
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 81f5 	beq.w	8002b90 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04f      	beq.n	8002892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 febe 	bl	8003574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d141      	bne.n	800288a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3308      	adds	r3, #8
 800280c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3308      	adds	r3, #8
 800282e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800283e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800284a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1d9      	bne.n	8002806 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	2b00      	cmp	r3, #0
 8002858:	d013      	beq.n	8002882 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a13      	ldr	r2, [pc, #76]	; (80028ac <HAL_UART_IRQHandler+0x29c>)
 8002860:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fad7 	bl	8000e1a <HAL_DMA_Abort_IT>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800287c:	4610      	mov	r0, r2
 800287e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e00f      	b.n	80028a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f998 	bl	8002bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	e00b      	b.n	80028a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f994 	bl	8002bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e007      	b.n	80028a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f990 	bl	8002bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80028a0:	e176      	b.n	8002b90 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a2:	bf00      	nop
    return;
 80028a4:	e174      	b.n	8002b90 <HAL_UART_IRQHandler+0x580>
 80028a6:	bf00      	nop
 80028a8:	04000120 	.word	0x04000120
 80028ac:	0800363b 	.word	0x0800363b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 8144 	bne.w	8002b42 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 813d 	beq.w	8002b42 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8136 	beq.w	8002b42 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	f040 80b2 	bne.w	8002a52 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8148 	beq.w	8002b94 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800290a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290e:	429a      	cmp	r2, r3
 8002910:	f080 8140 	bcs.w	8002b94 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800291a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002928:	f000 8085 	beq.w	8002a36 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800295a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002966:	e841 2300 	strex	r3, r2, [r1]
 800296a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800296e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1da      	bne.n	800292c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3308      	adds	r3, #8
 800297c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3308      	adds	r3, #8
 8002996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800299a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800299e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029a6:	e841 2300 	strex	r3, r2, [r1]
 80029aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e1      	bne.n	8002976 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3308      	adds	r3, #8
 80029b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3308      	adds	r3, #8
 80029d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e3      	bne.n	80029b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fe:	e853 3f00 	ldrex	r3, [r3]
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a06:	f023 0310 	bic.w	r3, r3, #16
 8002a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e4      	bne.n	80029f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f982 	bl	8000d3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8be 	bl	8002bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a50:	e0a0      	b.n	8002b94 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8092 	beq.w	8002b98 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8002a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 808d 	beq.w	8002b98 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa8:	e841 2300 	strex	r3, r2, [r1]
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1e4      	bne.n	8002a7e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	e853 3f00 	ldrex	r3, [r3]
 8002ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ad8:	633a      	str	r2, [r7, #48]	; 0x30
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e3      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0310 	bic.w	r3, r3, #16
 8002b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e4      	bne.n	8002afe <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f846 	bl	8002bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b40:	e02a      	b.n	8002b98 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
    }
    return;
 8002b6a:	e017      	b.n	8002b9c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_UART_IRQHandler+0x58e>
 8002b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fd6e 	bl	8003666 <UART_EndTransmit_IT>
    return;
 8002b8a:	e008      	b.n	8002b9e <HAL_UART_IRQHandler+0x58e>
      return;
 8002b8c:	bf00      	nop
 8002b8e:	e006      	b.n	8002b9e <HAL_UART_IRQHandler+0x58e>
    return;
 8002b90:	bf00      	nop
 8002b92:	e004      	b.n	8002b9e <HAL_UART_IRQHandler+0x58e>
      return;
 8002b94:	bf00      	nop
 8002b96:	e002      	b.n	8002b9e <HAL_UART_IRQHandler+0x58e>
      return;
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_IRQHandler+0x58e>
    return;
 8002b9c:	bf00      	nop
  }

}
 8002b9e:	37e8      	adds	r7, #232	; 0xe8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4ba6      	ldr	r3, [pc, #664]	; (8002ea8 <UART_SetConfig+0x2c4>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	6979      	ldr	r1, [r7, #20]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a94      	ldr	r2, [pc, #592]	; (8002eac <UART_SetConfig+0x2c8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d120      	bne.n	8002ca2 <UART_SetConfig+0xbe>
 8002c60:	4b93      	ldr	r3, [pc, #588]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d816      	bhi.n	8002c9c <UART_SetConfig+0xb8>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <UART_SetConfig+0x90>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c91 	.word	0x08002c91
 8002c7c:	08002c8b 	.word	0x08002c8b
 8002c80:	08002c97 	.word	0x08002c97
 8002c84:	2301      	movs	r3, #1
 8002c86:	77fb      	strb	r3, [r7, #31]
 8002c88:	e150      	b.n	8002f2c <UART_SetConfig+0x348>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	77fb      	strb	r3, [r7, #31]
 8002c8e:	e14d      	b.n	8002f2c <UART_SetConfig+0x348>
 8002c90:	2304      	movs	r3, #4
 8002c92:	77fb      	strb	r3, [r7, #31]
 8002c94:	e14a      	b.n	8002f2c <UART_SetConfig+0x348>
 8002c96:	2308      	movs	r3, #8
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e147      	b.n	8002f2c <UART_SetConfig+0x348>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e144      	b.n	8002f2c <UART_SetConfig+0x348>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a83      	ldr	r2, [pc, #524]	; (8002eb4 <UART_SetConfig+0x2d0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d132      	bne.n	8002d12 <UART_SetConfig+0x12e>
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d828      	bhi.n	8002d0c <UART_SetConfig+0x128>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <UART_SetConfig+0xdc>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d0d 	.word	0x08002d0d
 8002cc8:	08002d0d 	.word	0x08002d0d
 8002ccc:	08002d0d 	.word	0x08002d0d
 8002cd0:	08002d01 	.word	0x08002d01
 8002cd4:	08002d0d 	.word	0x08002d0d
 8002cd8:	08002d0d 	.word	0x08002d0d
 8002cdc:	08002d0d 	.word	0x08002d0d
 8002ce0:	08002cfb 	.word	0x08002cfb
 8002ce4:	08002d0d 	.word	0x08002d0d
 8002ce8:	08002d0d 	.word	0x08002d0d
 8002cec:	08002d0d 	.word	0x08002d0d
 8002cf0:	08002d07 	.word	0x08002d07
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e118      	b.n	8002f2c <UART_SetConfig+0x348>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e115      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d00:	2304      	movs	r3, #4
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	e112      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d06:	2308      	movs	r3, #8
 8002d08:	77fb      	strb	r3, [r7, #31]
 8002d0a:	e10f      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e10c      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a68      	ldr	r2, [pc, #416]	; (8002eb8 <UART_SetConfig+0x2d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d120      	bne.n	8002d5e <UART_SetConfig+0x17a>
 8002d1c:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d26:	2b30      	cmp	r3, #48	; 0x30
 8002d28:	d013      	beq.n	8002d52 <UART_SetConfig+0x16e>
 8002d2a:	2b30      	cmp	r3, #48	; 0x30
 8002d2c:	d814      	bhi.n	8002d58 <UART_SetConfig+0x174>
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d009      	beq.n	8002d46 <UART_SetConfig+0x162>
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d810      	bhi.n	8002d58 <UART_SetConfig+0x174>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <UART_SetConfig+0x15c>
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d006      	beq.n	8002d4c <UART_SetConfig+0x168>
 8002d3e:	e00b      	b.n	8002d58 <UART_SetConfig+0x174>
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e0f2      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d46:	2302      	movs	r3, #2
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e0ef      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e0ec      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d52:	2308      	movs	r3, #8
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e0e9      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e0e6      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <UART_SetConfig+0x2d8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d120      	bne.n	8002daa <UART_SetConfig+0x1c6>
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d72:	2bc0      	cmp	r3, #192	; 0xc0
 8002d74:	d013      	beq.n	8002d9e <UART_SetConfig+0x1ba>
 8002d76:	2bc0      	cmp	r3, #192	; 0xc0
 8002d78:	d814      	bhi.n	8002da4 <UART_SetConfig+0x1c0>
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d009      	beq.n	8002d92 <UART_SetConfig+0x1ae>
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d810      	bhi.n	8002da4 <UART_SetConfig+0x1c0>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <UART_SetConfig+0x1a8>
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d006      	beq.n	8002d98 <UART_SetConfig+0x1b4>
 8002d8a:	e00b      	b.n	8002da4 <UART_SetConfig+0x1c0>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e0cc      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e0c9      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e0c6      	b.n	8002f2c <UART_SetConfig+0x348>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e0c3      	b.n	8002f2c <UART_SetConfig+0x348>
 8002da4:	2310      	movs	r3, #16
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e0c0      	b.n	8002f2c <UART_SetConfig+0x348>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a44      	ldr	r2, [pc, #272]	; (8002ec0 <UART_SetConfig+0x2dc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d125      	bne.n	8002e00 <UART_SetConfig+0x21c>
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc2:	d017      	beq.n	8002df4 <UART_SetConfig+0x210>
 8002dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc8:	d817      	bhi.n	8002dfa <UART_SetConfig+0x216>
 8002dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dce:	d00b      	beq.n	8002de8 <UART_SetConfig+0x204>
 8002dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd4:	d811      	bhi.n	8002dfa <UART_SetConfig+0x216>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <UART_SetConfig+0x1fe>
 8002dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dde:	d006      	beq.n	8002dee <UART_SetConfig+0x20a>
 8002de0:	e00b      	b.n	8002dfa <UART_SetConfig+0x216>
 8002de2:	2300      	movs	r3, #0
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e0a1      	b.n	8002f2c <UART_SetConfig+0x348>
 8002de8:	2302      	movs	r3, #2
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e09e      	b.n	8002f2c <UART_SetConfig+0x348>
 8002dee:	2304      	movs	r3, #4
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e09b      	b.n	8002f2c <UART_SetConfig+0x348>
 8002df4:	2308      	movs	r3, #8
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e098      	b.n	8002f2c <UART_SetConfig+0x348>
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e095      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <UART_SetConfig+0x2e0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d125      	bne.n	8002e56 <UART_SetConfig+0x272>
 8002e0a:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e18:	d017      	beq.n	8002e4a <UART_SetConfig+0x266>
 8002e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e1e:	d817      	bhi.n	8002e50 <UART_SetConfig+0x26c>
 8002e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e24:	d00b      	beq.n	8002e3e <UART_SetConfig+0x25a>
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d811      	bhi.n	8002e50 <UART_SetConfig+0x26c>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <UART_SetConfig+0x254>
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e34:	d006      	beq.n	8002e44 <UART_SetConfig+0x260>
 8002e36:	e00b      	b.n	8002e50 <UART_SetConfig+0x26c>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e076      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e073      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e44:	2304      	movs	r3, #4
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e070      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e06d      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e50:	2310      	movs	r3, #16
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e06a      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <UART_SetConfig+0x2e4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d138      	bne.n	8002ed2 <UART_SetConfig+0x2ee>
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <UART_SetConfig+0x2cc>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e6e:	d017      	beq.n	8002ea0 <UART_SetConfig+0x2bc>
 8002e70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e74:	d82a      	bhi.n	8002ecc <UART_SetConfig+0x2e8>
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d00b      	beq.n	8002e94 <UART_SetConfig+0x2b0>
 8002e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e80:	d824      	bhi.n	8002ecc <UART_SetConfig+0x2e8>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <UART_SetConfig+0x2aa>
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d006      	beq.n	8002e9a <UART_SetConfig+0x2b6>
 8002e8c:	e01e      	b.n	8002ecc <UART_SetConfig+0x2e8>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	77fb      	strb	r3, [r7, #31]
 8002e92:	e04b      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e94:	2302      	movs	r3, #2
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e048      	b.n	8002f2c <UART_SetConfig+0x348>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e045      	b.n	8002f2c <UART_SetConfig+0x348>
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e042      	b.n	8002f2c <UART_SetConfig+0x348>
 8002ea6:	bf00      	nop
 8002ea8:	efff69f3 	.word	0xefff69f3
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	40004800 	.word	0x40004800
 8002ebc:	40004c00 	.word	0x40004c00
 8002ec0:	40005000 	.word	0x40005000
 8002ec4:	40011400 	.word	0x40011400
 8002ec8:	40007800 	.word	0x40007800
 8002ecc:	2310      	movs	r3, #16
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e02c      	b.n	8002f2c <UART_SetConfig+0x348>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <UART_SetConfig+0x4bc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d125      	bne.n	8002f28 <UART_SetConfig+0x344>
 8002edc:	4b71      	ldr	r3, [pc, #452]	; (80030a4 <UART_SetConfig+0x4c0>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002eea:	d017      	beq.n	8002f1c <UART_SetConfig+0x338>
 8002eec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ef0:	d817      	bhi.n	8002f22 <UART_SetConfig+0x33e>
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d00b      	beq.n	8002f10 <UART_SetConfig+0x32c>
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	d811      	bhi.n	8002f22 <UART_SetConfig+0x33e>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <UART_SetConfig+0x326>
 8002f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f06:	d006      	beq.n	8002f16 <UART_SetConfig+0x332>
 8002f08:	e00b      	b.n	8002f22 <UART_SetConfig+0x33e>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	77fb      	strb	r3, [r7, #31]
 8002f0e:	e00d      	b.n	8002f2c <UART_SetConfig+0x348>
 8002f10:	2302      	movs	r3, #2
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e00a      	b.n	8002f2c <UART_SetConfig+0x348>
 8002f16:	2304      	movs	r3, #4
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e007      	b.n	8002f2c <UART_SetConfig+0x348>
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e004      	b.n	8002f2c <UART_SetConfig+0x348>
 8002f22:	2310      	movs	r3, #16
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e001      	b.n	8002f2c <UART_SetConfig+0x348>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f34:	d15b      	bne.n	8002fee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d828      	bhi.n	8002f8e <UART_SetConfig+0x3aa>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <UART_SetConfig+0x360>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f69 	.word	0x08002f69
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08002f8f 	.word	0x08002f8f
 8002f54:	08002f7f 	.word	0x08002f7f
 8002f58:	08002f8f 	.word	0x08002f8f
 8002f5c:	08002f8f 	.word	0x08002f8f
 8002f60:	08002f8f 	.word	0x08002f8f
 8002f64:	08002f87 	.word	0x08002f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f68:	f7fe fe0a 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	61b8      	str	r0, [r7, #24]
        break;
 8002f6e:	e013      	b.n	8002f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f70:	f7fe fe1a 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002f74:	61b8      	str	r0, [r7, #24]
        break;
 8002f76:	e00f      	b.n	8002f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <UART_SetConfig+0x4c4>)
 8002f7a:	61bb      	str	r3, [r7, #24]
        break;
 8002f7c:	e00c      	b.n	8002f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7fe fd2d 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 8002f82:	61b8      	str	r0, [r7, #24]
        break;
 8002f84:	e008      	b.n	8002f98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8a:	61bb      	str	r3, [r7, #24]
        break;
 8002f8c:	e004      	b.n	8002f98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	77bb      	strb	r3, [r7, #30]
        break;
 8002f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d074      	beq.n	8003088 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	005a      	lsls	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	d916      	bls.n	8002fe8 <UART_SetConfig+0x404>
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc0:	d212      	bcs.n	8002fe8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f023 030f 	bic.w	r3, r3, #15
 8002fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	89fa      	ldrh	r2, [r7, #14]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e04f      	b.n	8003088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77bb      	strb	r3, [r7, #30]
 8002fec:	e04c      	b.n	8003088 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d828      	bhi.n	8003046 <UART_SetConfig+0x462>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x418>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003029 	.word	0x08003029
 8003004:	08003031 	.word	0x08003031
 8003008:	08003047 	.word	0x08003047
 800300c:	08003037 	.word	0x08003037
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	0800303f 	.word	0x0800303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7fe fdae 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8003024:	61b8      	str	r0, [r7, #24]
        break;
 8003026:	e013      	b.n	8003050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7fe fdbe 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 800302c:	61b8      	str	r0, [r7, #24]
        break;
 800302e:	e00f      	b.n	8003050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <UART_SetConfig+0x4c4>)
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e00c      	b.n	8003050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003036:	f7fe fcd1 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800303a:	61b8      	str	r0, [r7, #24]
        break;
 800303c:	e008      	b.n	8003050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e004      	b.n	8003050 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	77bb      	strb	r3, [r7, #30]
        break;
 800304e:	bf00      	nop
    }

    if (pclk != 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d018      	beq.n	8003088 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	085a      	lsrs	r2, r3, #1
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	441a      	add	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b0f      	cmp	r3, #15
 800306e:	d909      	bls.n	8003084 <UART_SetConfig+0x4a0>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003076:	d205      	bcs.n	8003084 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	e001      	b.n	8003088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003094:	7fbb      	ldrb	r3, [r7, #30]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40007c00 	.word	0x40007c00
 80030a4:	40023800 	.word	0x40023800
 80030a8:	00f42400 	.word	0x00f42400

080030ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031aa:	d10a      	bne.n	80031c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003200:	f7fd fc5a 	bl	8000ab8 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b08      	cmp	r3, #8
 8003212:	d10e      	bne.n	8003232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f817 	bl	8003256 <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00d      	b.n	800324e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b09c      	sub	sp, #112	; 0x70
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003266:	e0a5      	b.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	f000 80a1 	beq.w	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fd fc21 	bl	8000ab8 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <UART_WaitOnFlagUntilTimeout+0x32>
 8003282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003284:	2b00      	cmp	r3, #0
 8003286:	d13e      	bne.n	8003306 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800329c:	667b      	str	r3, [r7, #100]	; 0x64
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e6      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032da:	64ba      	str	r2, [r7, #72]	; 0x48
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e067      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d04f      	beq.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003322:	d147      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
 800334e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e6      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	613b      	str	r3, [r7, #16]
   return(result);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3308      	adds	r3, #8
 800337e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003380:	623a      	str	r2, [r7, #32]
 8003382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	69f9      	ldr	r1, [r7, #28]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	61bb      	str	r3, [r7, #24]
   return(result);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e010      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69da      	ldr	r2, [r3, #28]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4013      	ands	r3, r2
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f43f af4a 	beq.w	8003268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3770      	adds	r7, #112	; 0x70
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b097      	sub	sp, #92	; 0x5c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d10e      	bne.n	8003432 <UART_Start_Receive_IT+0x52>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <UART_Start_Receive_IT+0x48>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003426:	e02d      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003430:	e028      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <UART_Start_Receive_IT+0x76>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <UART_Start_Receive_IT+0x6c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800344a:	e01b      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	227f      	movs	r2, #127	; 0x7f
 8003450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003454:	e016      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345e:	d10d      	bne.n	800347c <UART_Start_Receive_IT+0x9c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <UART_Start_Receive_IT+0x92>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	227f      	movs	r2, #127	; 0x7f
 800346c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003470:	e008      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	223f      	movs	r2, #63	; 0x3f
 8003476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800347a:	e003      	b.n	8003484 <UART_Start_Receive_IT+0xa4>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2222      	movs	r2, #34	; 0x22
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3308      	adds	r3, #8
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	657b      	str	r3, [r7, #84]	; 0x54
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3308      	adds	r3, #8
 80034b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e5      	bne.n	8003492 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d107      	bne.n	80034e0 <UART_Start_Receive_IT+0x100>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a24      	ldr	r2, [pc, #144]	; (800356c <UART_Start_Receive_IT+0x18c>)
 80034dc:	665a      	str	r2, [r3, #100]	; 0x64
 80034de:	e002      	b.n	80034e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a23      	ldr	r2, [pc, #140]	; (8003570 <UART_Start_Receive_IT+0x190>)
 80034e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d019      	beq.n	800352a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800351a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e6      	bne.n	80034f6 <UART_Start_Receive_IT+0x116>
 8003528:	e018      	b.n	800355c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f043 0320 	orr.w	r3, r3, #32
 800353e:	653b      	str	r3, [r7, #80]	; 0x50
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	6a3a      	ldr	r2, [r7, #32]
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	61bb      	str	r3, [r7, #24]
   return(result);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e6      	bne.n	800352a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	375c      	adds	r7, #92	; 0x5c
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	08003817 	.word	0x08003817
 8003570:	080036bb 	.word	0x080036bb

08003574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b095      	sub	sp, #84	; 0x54
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
 800359c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e6      	bne.n	800357c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3308      	adds	r3, #8
 80035cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e5      	bne.n	80035ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d118      	bne.n	800361c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6979      	ldr	r1, [r7, #20]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	613b      	str	r3, [r7, #16]
   return(result);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800362e:	bf00      	nop
 8003630:	3754      	adds	r7, #84	; 0x54
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff faad 	bl	8002bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b088      	sub	sp, #32
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60bb      	str	r3, [r7, #8]
   return(result);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6979      	ldr	r1, [r7, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	613b      	str	r3, [r7, #16]
   return(result);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fa79 	bl	8002ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b096      	sub	sp, #88	; 0x58
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d0:	2b22      	cmp	r3, #34	; 0x22
 80036d2:	f040 8094 	bne.w	80037fe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80036e4:	b2d9      	uxtb	r1, r3
 80036e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	400a      	ands	r2, r1
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d177      	bne.n	800380e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003732:	653b      	str	r3, [r7, #80]	; 0x50
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
 800373e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e6      	bne.n	800371e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	623b      	str	r3, [r7, #32]
   return(result);
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003770:	633a      	str	r2, [r7, #48]	; 0x30
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	2b01      	cmp	r3, #1
 8003796:	d12e      	bne.n	80037f6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	69b9      	ldr	r1, [r7, #24]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	617b      	str	r3, [r7, #20]
   return(result);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e6      	bne.n	800379e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d103      	bne.n	80037e6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff f9ec 	bl	8002bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80037f4:	e00b      	b.n	800380e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fc fff6 	bl	80007e8 <HAL_UART_RxCpltCallback>
}
 80037fc:	e007      	b.n	800380e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0208 	orr.w	r2, r2, #8
 800380c:	619a      	str	r2, [r3, #24]
}
 800380e:	bf00      	nop
 8003810:	3758      	adds	r7, #88	; 0x58
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b096      	sub	sp, #88	; 0x58
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003824:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	f040 8094 	bne.w	800395a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003842:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003846:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800384a:	4013      	ands	r3, r2
 800384c:	b29a      	uxth	r2, r3
 800384e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d177      	bne.n	800396a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
 800389a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800389e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e6      	bne.n	800387a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3308      	adds	r3, #8
 80038b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d12e      	bne.n	8003952 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	60bb      	str	r3, [r7, #8]
   return(result);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6979      	ldr	r1, [r7, #20]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	613b      	str	r3, [r7, #16]
   return(result);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e6      	bne.n	80038fa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d103      	bne.n	8003942 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff f93e 	bl	8002bcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003950:	e00b      	b.n	800396a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fc ff48 	bl	80007e8 <HAL_UART_RxCpltCallback>
}
 8003958:	e007      	b.n	800396a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0208 	orr.w	r2, r2, #8
 8003968:	619a      	str	r2, [r3, #24]
}
 800396a:	bf00      	nop
 800396c:	3758      	adds	r7, #88	; 0x58
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f000 f820 	bl	80039cc <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08003a30 	.word	0x08003a30
 80039b0:	08003a30 	.word	0x08003a30
 80039b4:	08003a30 	.word	0x08003a30
 80039b8:	08003a34 	.word	0x08003a34

080039bc <memset>:
 80039bc:	4402      	add	r2, r0
 80039be:	4603      	mov	r3, r0
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <memset+0xa>
 80039c4:	4770      	bx	lr
 80039c6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ca:	e7f9      	b.n	80039c0 <memset+0x4>

080039cc <_init>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr

080039d8 <_fini>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	bf00      	nop
 80039dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039de:	bc08      	pop	{r3}
 80039e0:	469e      	mov	lr, r3
 80039e2:	4770      	bx	lr
